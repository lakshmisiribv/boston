import numpy as np
import pylab as pl
from sklearn import datasets
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error,median_absolute_error,r2_score,mean_absolute_error
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
def load_datd():
    boston = datasets.boston()
    return boston
def explore_city_data(City_data):
    housing_price = city_data.target
    housing_Price = city_data.data
    number_of_houses = housing_features.shape[0]
    number_of_features = housing_features.shape[1]
    max_price = np.max(housing_prices)
    min_price = np.min(housing_prices)
    mean_price = np.mean(housing_prices)
    median_price = np.median(housing_prices)
    standard_deviation = np.std(housing_prices)

    print("number of houses:",number_of_houses)
    print("number of features:",number_of_features)
    print("min price of house:",min_price)
    print("max price of house:",max_price)
    print("mean price of house:",mean_price)
    print("median price of house:",median_price)
    print("Standard Deviation for prices of house:",Standard_deviation)
def performance_metric(label,prediction):
    return_mean_squared_error(label,prediction)
    pass
def split_data(city_data):
    x,y=city_data,city_data.target
    x_train,x_test, y_train,y_test=train_test_split(x,y,test_size=0.30,train_size=0.70,random_state=42)
    return x_train,y_train,x_test,y_test
def learning_curve(depth,x_train,y_train,x_test,y_test):
    sizes=np.linespace(1, len(x_train),50)
    train_err=np.zeroes(len(sizes))
    test_err=np.zeroes(len(sizes))
    
    print("Decision Tree with max Depth:")
    print(depth)
    
    for i,s in enumerate(sizes):
        regressor=DecisionTreeRegressor(max_depth=depth)
        regressor.fit(x_tarin[:s],y_train[:s])
        
        train_err[i]=performance_metric(y_train[:s]),regressor.predict(x_train[:s])
        
        train_err[i]=performance_metric(y_test),regressor.predict(x_test)
    
        plt.figure()
        pl.plot(y_train_regressor.predict(x_train))
        pl.saveflag("residual_plot.png")
def learning_curve_graph(sizes,train_err,test_err,depth):
    plt.figure()
    plt.title("desicion Trees: Performance vs Training size")
    pl.plot(sizes,test_err,lw=2,label='test error')
    pl.plot(sizes,train_err,lw=2,label='training error')
    pl.legend()
    pl.xlabel("Trainingsize")
    pl.ylabel('error')
    